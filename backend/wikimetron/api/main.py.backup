from fastapi import FastAPI, BackgroundTasks, HTTPException
from fastapi.middleware.cors import CORSMiddleware
from fastapi.responses import JSONResponse
from pydantic import BaseModel
from typing import List, Optional
import uuid
import asyncio
from datetime import datetime
import logging

# Configuration du logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# Création de l'application FastAPI
app = FastAPI(
    title="Wikimetron API",
    description="Wikipedia Content Intelligence Platform",
    version="1.0.0",
    docs_url="/docs",
    redoc_url="/redoc"
)

# CORS pour le développement
app.add_middleware(
    CORSMiddleware,
    allow_origins=["http://localhost:8300", "http://127.0.0.1:8300"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# Modèles Pydantic
class AnalyzeRequest(BaseModel):
    pages: List[str]
    start_date: str
    end_date: str  
    language: str = "fr"

class TaskResponse(BaseModel):
    task_id: str
    status: str
    estimated_time: Optional[int] = None

# Stockage temporaire des tâches (en production: Redis/DB)
tasks_storage = {}

@app.get("/")
async def root():
    return {
        "message": "Wikimetron API",
        "version": "1.0.0",
        "docs": "/docs",
        "status": "operational"
    }

@app.get("/health")
async def health_check():
    return {"status": "healthy", "timestamp": datetime.now().isoformat()}

@app.post("/api/analyze", response_model=TaskResponse)
async def analyze_pages(request: AnalyzeRequest, background_tasks: BackgroundTasks):
    """Lance une analyse Wikipedia"""
    
    # Validation
    if not request.pages:
        raise HTTPException(status_code=400, detail="Au moins une page est requise")
    
    if len(request.pages) > 50:
        raise HTTPException(status_code=400, detail="Maximum 50 pages par analyse")
    
    # Créer une tâche
    task_id = str(uuid.uuid4())
    tasks_storage[task_id] = {
        "status": "queued",
        "created_at": datetime.now(),
        "pages": request.pages,
        "request": request.dict()
    }
    
    
    from wikimetron.metrics.pipeline import run_analysis
    background_tasks.add_task(run_analysis, task_id, request)
    
    return TaskResponse(
        task_id=task_id,
        status="queued",
        estimated_time=len(request.pages) * 10
    )

@app.get("/api/tasks/{task_id}")
async def get_task_status(task_id: str):
    """Récupère le statut d'une tâche"""
    
    if task_id not in tasks_storage:
        raise HTTPException(status_code=404, detail="Tâche non trouvée")
    
    return tasks_storage[task_id]

@app.get("/api/tasks")
async def list_tasks():
    """Liste toutes les tâches"""
    return {
        "tasks": [
            {
                "task_id": tid,
                "status": task["status"],
                "created_at": task["created_at"].isoformat(),
                "pages_count": len(task.get("pages", []))
            }
            for tid, task in tasks_storage.items()
        ]
    }

if __name__ == "__main__":
    import uvicorn
    uvicorn.run(app, host="0.0.0.0", port=8000, reload=True)
